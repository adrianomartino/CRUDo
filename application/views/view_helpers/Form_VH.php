<?php
/*
 This class establish how forms and form elements are visualized
 
 
 Implement functions to translate!
 
*/


class Form_VH{
    
    public $Form; //returns the form pupulated at the end
    static $Trans=array();
    
    public function __construct($main_table,$Fields){
        
        //get translations
        $LabelTranslations=parse_ini_file('dbTranslations.php',true);
        if($LabelTranslations)
      		if(isset($LabelTranslations[MAIN_TOPIC]))
            self::$Trans=$LabelTranslations[MAIN_TOPIC];
            
        

        
        
        $this->Form .=   self::open($main_table);
        
            foreach($Fields as $Field)
            if($Field)
                self::addFieldFromDb($Field);

        
        $this->Form .=   self::submit('salva');
        $this->Form .=   self::close($main_table);
        
        
    }
    
    
    
    public function addFieldFromDb($FieldInfo){
        /*
         Field is supposed to be an array like this
         this array is automatically generated by Form_C
         
         $Field=array(
            'mandatory'         => NULL,
            'maxlength'         => NULL,
            'name'              => $field_name,
            'type'              => NULL,
            'PRE_value'         => NULL,
            'SelectOptions'     => array(),
            'use_select_values' => false,
            'value'             => NULL
        );
         
         currently superted field types:
         textarea|input|select|multipleselect|checkbox|timestamp|hidden
         
        */
        
        $form_field='';//scaffold
        
        //pass the array in vars to shorten things up
        if($FieldInfo)
            foreach($FieldInfo as $key=>$value)
                    ${$key}=$value;

        
        //start with a span
        $form_field.='<span>';
        
        //add label
        if($type!='hidden' && $type!='checkbox')
        $form_field.=self::label($name,$mandatory);
        
        //add PRE_field to compare with previous value
        if($PRE_value!==NULL):
            $this->is_update=true;
            $form_field.=$this->hidden('PRE_'.$name,htmlentities($PRE_value));
        endif;
        
        #echo '$FieldInfo[name]='.$FieldInfo['name'].'
        #name='.$name.' type='.$type;
        
        
        //add right field
        //textarea|input|password|select|multipleselect|checkbox|timestamp|hidden
        
        if
        ($type=='textarea'):
        
            $form_field.=self::textarea($name,$value,$maxlength);
        
        elseif
        ($type=='input'):
        
            $form_field.=self::input($name,$value,$maxlength);
        
        elseif
        ($type=='password'):
        
            $form_field.=self::password($name,$value,$maxlength);
            $form_field.=self::label('rep_'.$name,$mandatory);
            $form_field.=self::password('rep_'.$name,$value,$maxlength);
        
        elseif
        ($type=='select' || $type=='multipleselect'):
        
            $ms = ( $type=='multipleselect' ) ? true : false ;
            $form_field.=self::select($name,$value,$SelectOptions,$use_select_values,$ms);
            
        elseif
        ($type=='checkbox'):
        
            $form_field.=self::checkbox($name,$value);
        
        elseif
        ($type=='timestamp'):
        
            $form_field.=self::timestamp($name,$value,$maxlength);
        
        elseif
        ($type=='hidden'):
        
            $form_field.=self::hidden($name,$value);
        
        elseif
        ($type=='file'):
        
            $form_field.=self::_file($name);
        
        endif;
        
        
        //display eventual after text
        $form_field.=$after_text;

        //display eventual error message
        $form_field.=(isset(Notify::$All['user_errors'][$name])) ? '<span class="FormError">'.strtr(Notify::$All['user_errors'][$name],self::$Trans).'</span>' : '';
        
        //close span
        $form_field.='</span>';
	
	
	
	
	//echo youtube movie if it is
	if($name=='youtube_video')
	    $form_field.=YouTube::display($value);
	
        
        //add field to form
        $this->Form.=$form_field;
        
    }
    
    
    
    static function close(){
        return '</form>';
    }
    
    //form label
    static function label($name,$mandatory=false){
        
        $mandatory_sign=($mandatory) ? '*':'';
        
        $label=strtr($name,self::$Trans);
        
        return '
        <label for=\''.$name.'\'><strong>'.$label.$mandatory_sign.'</strong></label>';
        
    }
    
    
    //open form
    static function open($main_table, $action=FORM_ACTION, $method='POST'){
    
        return "
        <form id='$main_table' action='$action' method='$method' enctype='multipart/form-data'>
        <input type='hidden' name='$main_table' value='$main_table'>
        " ;
    
    }
    
    
    //open fieldset
    static function openFieldset($fieldsetname){
        
        $fieldset="
        <fieldset id='$fieldsetname'>
        <legend>'$fieldsetname'</legend>
        ";
    }
    
    
    static function checkbox($name,$value=''){
        
        $checked=($value) ? ' checked="checked"' : '';
        
        return "<input type='checkbox' name='".$name."' id='".$name."'.$checked.'/><b>".strtr($name,self::$Trans).'</b></br>';
        
    }
    
    
    static function _file($name){
        
        $del_link=ROOT.'admin/'.MAIN_TOPIC.'/'.PAGE_TOPIC.'/delete_image/';
        
	$img    =  (URL_ACTION!='new') ?
          (EasyImage::getFullPath(CURRENT_UID))   ?   Images_VH::display()."<a  onclick=\"return confirm('Sei sicuro(a) di voler cancellare la foto?')\" href='".$del_link."'>cancella</a>": NULL : '';
        
        return "$img<input type='file' name='".$name."' id='".$name."' >";
        
    }

    //hidden field
    static function hidden($name,$value=''){
        
        return "<input type='hidden' name='".$name."' id='".$name."' value='".$value."'/>";
        
    }
    

    

    static function input($name,$value='',$maxlength=''){
        
        $ml=($maxlength) ? ' maxlength="'.$maxlength.'"':'';
        $value=($value) ? ' value="'.$value.'"' : '';
	
	
	###
	if($name=='cap_ristorante')
	    $location=self::location();
        
        return
        '<input type="text" name="'.$name.'" id="'.$name.'"'.$value.$ml.' />
	<div class="waiter"></div>
	'.
	@$location;
        
        
    }
    

    
    
    static function password($name,$value='',$maxlength=''){
        
        $ml=($maxlength) ? ' maxlength="'.$maxlength.'"':'';
        $value=($value) ? ' value="'.$value.'"' : '';
        
        return
        '<input type="password" name="'.$name.'" id="'.$name.'"'.$value.$ml.' />';

    }
    
    
    
    static function select($name,$value='',$Options,$use_selected_values,$multiple=false){

        $options=''; //scaffold
        
        
        //decide if it's multiple
        $ms = ($multiple) ? ' multiple="multiple"':'';
        
        //populate options
        foreach($Options as $current_value=>$label):
        
            $value_to_use=($use_selected_values) ? $current_value : $label ;
            
            $sel_val=($value_to_use==$value) ? ' selected="selected"' : '';
            
            $options.='<option value="'.$value_to_use.'"'.$sel_val.'>'.$label.'</option>'.PHP_EOL;
            
        endforeach;
        
        return
        '
        <select name="'.$name.'" id="'.$name.'"'.$ms.'>
            '.$options.'
        </select>
        ';
        
    }
    

    static function submit($value='invia il form'){
        
        return '<input type="submit" class="submit" value="'.$value.'">';
        
    }
    
    
    static function textarea($name,$value='',$maxlength=''){
      
        

        
        
      
        $maxlength=($maxlength) ? ' maxlength="'.$maxlength.'"' : '';
        
        //dirty...to clean
        $img=NULL;
     
        	
        $class=(!$maxlength && $name!='item_snippet') ? ' class="rich_editor"':'';
        $style=(!$maxlength && $name!='item_snippet') ? ' style="width:515px; height:600px; margin-bottom:100px"':'';
        
        $value=preg_replace("/^<p><img[^>]+\>\<\/p\>/i", "", $value);
       							$value=preg_replace("/^<p><img[^>]+\>/i", "", $value);
        return
        '
        <textarea name="'.$name.'" id="'.$name.'" rows="2" cols="40" '.$maxlength.$class.$style.' title="">'
        .$img.$value.
        '</textarea><span class="charsRemaining"></span>
        ';
        
        
    }
    
    
    
    static function timestamp($name,$value='',$maxlength=''){
        /* Just like input for the moment only with class='timestamp' added
        to allow jquery calendar function */
        
        $ml=($maxlength) ? ' maxlength="'.$maxlength.'"':'';
        $value=($value) ? ' value="'.$value.'"' : '';
        
        return
        '<input type="text" name="'.$name.'" id="'.$name.'"'.$value.$ml.' class="timestamp" />
        <span class="charsRemaining"></span>';
        
        
    }
    
    
    
    
    static function location(){
	
	return
	'
	<div id="additional_options" style="display: none;">
		<select name="location_id"></select>
		<div class="message"></div>
	</div>
	
	<div class="hide-js">
		<label for="regione">Regione:</label>
		<select id="regione" name="regione"></select>
	</div>
	
	<div class="hide-js">
		<label for="provincia">Provincia:</label>
		<select id="provincia" name="provincia"></select>
	</div>
	
	<div class="hide-js">
		<label for="comune">Provincia:</label>
		<input id="comune" name="comune" />
	</div>
	';
	
	
    }
    
    
    
    
    
    
    

    

    

    
    
    
}